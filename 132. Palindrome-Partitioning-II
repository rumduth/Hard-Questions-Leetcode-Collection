/**
 * @param {string} s
 * @return {number}
 */
var minCut = function(s) {
    let n = s.length;
    let validPalindrome = Array.from({length: n}, () => new Array(n).fill(true));
    for(let left = n - 2; left >= 0; left--){
        for(let right = left + 1; right < n; right++){
            validPalindrome[left][right] = s[left] === s[right] && validPalindrome[left+1][right-1];
        }
    }
    let memo = {}
    function backtrack(i){
        if(i == -1)
            return 0;
        if(i in memo)
            return memo[i];
        let seq = Infinity;
        for(let j = i; j >= 0; j--){
            if(validPalindrome[j][i]){
                seq = Math.min(seq,1 + backtrack(j-1));
            }
        }
        memo[i] = seq;
        return seq;
    }
    
    return backtrack(n-1) - 1;

};





/**
 * @param {string} s
 * @return {number}
 */
var minCut = function(s) {
    let n = s.length;
    let validPalindrome = Array.from({length: n}, () => new Array(n).fill(true));
    for(let left = n - 2; left >= 0; left--){
        for(let right = left + 1; right < n; right++){
            validPalindrome[left][right] = s[left] === s[right] && validPalindrome[left+1][right-1];
        }
    }
    let seqs = new Array(n).fill(Infinity);

    for(let left = n - 1; left >= 0; left--){
        if(validPalindrome[left][n-1]){
            seqs[left] = 1;
            continue;
        }
        for(let right = left; right < n - 1; right++){
            if(validPalindrome[left][right]){
                seqs[left] = Math.min(seqs[left], 1 + seqs[right+1])
            }
        }
    }
    return seqs[0] - 1;
    
};
