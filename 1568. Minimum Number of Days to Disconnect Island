class Solution:
    def minDays(self, grid: List[List[int]]) -> int:
        m, n = len(grid), len(grid[0])
        
        dir = [0,1,0,-1,0]

        def countIslands():
            visited = [[False] * n for _ in range(m)]
            def dfs(r, c):
                if r < 0 or r == m or c < 0 or c == n:
                    return
                if grid[r][c] == 0 or visited[r][c]:
                    return
                
                visited[r][c] = True
                for i in range(4):
                    dfs(r + dir[i], c + dir[i+1])
            islands = 0
            for i in range(m):
                for j in range(n):
                    if grid[i][j] == 1 and not visited[i][j]:
                        islands += 1
                        dfs(i,j)
            return islands

 
        numIslands = countIslands()
        if numIslands == 0 or numIslands >= 2:
            return 0
        def canDisconnectInOneDay():
            for i in range(m):
                for j in range(n):
                    if grid[i][j] == 1:
                        grid[i][j] = 0
                        numIslands = countIslands()
                        if numIslands == 0 or numIslands >= 2:
                            return 1
                        grid[i][j] = 1
            return 2
        return canDisconnectInOneDay()
